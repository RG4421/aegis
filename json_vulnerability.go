package nexpose

import (
	"github.com/benjivesterby/validator"
)

// Check is the json representation of a vulnerability check used in the nexpose api
type Check struct {

	// The identifier of the vulnerability check.
	ID string `json:"id,omitempty"`

	// Hypermedia links to corresponding or related resources.
	Links []Link `json:"links,omitempty"`

	// The name of the plugin (module) the check belongs to.
	Plugin string `json:"plugin,omitempty"`

	// Whether the check results in potential vulnerabilities.
	Potential bool `json:"potential,omitempty"`

	// Whether the check requires credentials in order to run.
	RequiresCredentials bool `json:"requiresCredentials,omitempty"`

	// Whether the checked is deemed to be "safe" to run. A safe check is one that can be run without negatively
	// impacting the host it is run against.
	Safe bool `json:"safe,omitempty"`

	// Whether the check operates against a service, or false it it is a local check.
	Service bool `json:"service,omitempty"`

	// Whether the check may only register a result once during a scan of host. Otherwise, the tests in the
	// check can run multiple times, possibly registering multiple results.
	Unique bool `json:"unique,omitempty"`

	// The identifier of the vulnerability the check results in.
	Vulnerability string `json:"vulnerability,omitempty"`
}

// VulnerabilityReference is the reference to vendors, cve, etc... returned from the nexpose api
type VulnerabilityReference struct {

	// Hypermedia link to the destination of the vulnerability reference.
	Advisory *struct {

		// The hypertext reference for the vulnerability reference.
		Href string `json:"href,omitempty"`

		// The relation of the hypermedia link, Advisory.
		Rel string `json:"rel,omitempty"`
	} `json:"advisory,omitempty"`

	// The identifier of the vulnerability reference.
	ID int `json:"id,omitempty"`

	// Hypermedia links to corresponding or related resources.
	Links []Link `json:"links,omitempty"`

	// The contents of the reference, typically an identifier or hyperlink.
	// Example: CVE-2011-0762
	Ref string `json:"reference,omitempty"`

	// The originating source of the reference.
	// Examples: url, cve, bid, redhat
	Src string `json:"source,omitempty"`
}

// Reference returns the actual reference value
func (r *VulnerabilityReference) Reference() (ref string) {
	if validator.IsValid(r) {
		ref = r.Ref
	}

	return ref
}

// Vulnerability is the json representation of vulnerabilities returned from the nexpose api
type Vulnerability struct {

	// The date the vulnerability coverage was added.
	// The format is an ISO 8601 date, `YYYY-MM-DD`.
	Added string `json:"added,omitempty"`

	// All CVEs assigned to this vulnerability.
	Cves []string `json:"cves,omitempty"`

	// The CVSS vector(s) for the vulnerability.
	Cvss *struct {

		// Hypermedia links to corresponding or related resources.
		Links []Link `json:"links,omitempty"`

		// The Common Vulnerability Scoring System (CVSS v2) information for the vulnerability.
		V2 *struct {

			// Access Complexity (AC) component which measures the complexity of the attack required to exploit the
			// vulnerability once an attacker has gained access to the target system.
			AccessComplexity string `json:"accessComplexity,omitempty"`

			// Access Vector (Av) component which reflects how the vulnerability is exploited.
			AccessVector string `json:"accessVector,omitempty"`

			// Authentication (Au) component which measures the number of times an attacker must authenticate to a
			// target in order to exploit a vulnerability.
			Authentication string `json:"authentication,omitempty"`

			// Availability Impact (A) component which measures the impact to availability of a
			// successfully exploited vulnerability.
			AvailabilityImpact string `json:"availabilityImpact,omitempty"`

			// Confidentiality Impact (C) component which measures the impact on confidentiality of a successfully
			// exploited vulnerability.
			ConfidentialityImpact string `json:"confidentialityImpact,omitempty"`

			// The CVSS exploit score.
			ExploitScore float32 `json:"exploitScore,omitempty"`

			// The CVSS impact score.
			ImpactScore float32 `json:"impactScore,omitempty"`

			// Integrity Impact (I) component measures the impact to integrity of a successfully exploited vulnerability.
			IntegrityImpact string `json:"integrityImpact,omitempty"`

			// The CVSS score, which ranges from 0-10.
			Score float32 `json:"score,omitempty"`

			// The CVSS v2 vector.
			Vector string `json:"vector,omitempty"`
		} `json:"v2,omitempty"`

		// The Common Vulnerability Scoring System (CVSS v3) information for the vulnerability.
		V3 *struct {

			// Access Complexity (AC) component with measures the conditions beyond the attacker's control that
			// must exist in order to exploit the vulnerability.
			AttackComplexity string `json:"attackComplexity,omitempty"`

			// Attack Vector (AV) component which measures context by which vulnerability exploitation is possible.
			AttackVector string `json:"attackVector,omitempty"`

			// Availability Impact (A) measures the impact to the availability of the impacted component resulting
			// from a successfully exploited vulnerability.
			AvailabilityImpact string `json:"availabilityImpact,omitempty"`

			// Confidentiality Impact (C) component which measures the impact on confidentiality of a successfully
			// exploited vulnerability.
			ConfidentialityImpact string `json:"confidentialityImpact,omitempty"`

			// The CVSS impact score.
			ExploitScore float32 `json:"exploitScore,omitempty"`

			// The CVSS exploit score.
			ImpactScore float32 `json:"impactScore,omitempty"`

			// Integrity Impact (I) measures the impact to integrity of a successfully exploited vulnerability.
			// Integrity refers to the trustworthiness and veracity of information.
			IntegrityImpact string `json:"integrityImpact,omitempty"`

			// Privileges Required (PR) measures the level of privileges an attacker must possess before successfully
			// exploiting the vulnerability.
			PrivilegeRequired string `json:"privilegeRequired,omitempty"`

			// Scope (S) measures the collection of privileges defined by a computing authority (e.g. an application,
			// an operating system, or a sandbox environment) when granting access to computing resources (e.g. files,
			// CPU, memory, etc). These privileges are assigned based on some method of identification and authorization.
			Scope string `json:"scope,omitempty"`

			// The CVSS score, which ranges from 0-10.
			Score float32 `json:"score,omitempty"`

			// User Interaction (UI) measures the requirement for a user, other than the attacker, to participate in
			// the successful compromise of the vulnerable component.
			UserInteraction string `json:"userInteraction,omitempty"`

			// The CVSS v3 vector.
			Vector string `json:"vector,omitempty"`
		} `json:"v3,omitempty"`
	} `json:"cvss,omitempty"`

	// The description of the vulnerability.
	Description *struct {

		// Hypertext Markup Language (HTML) representation of the content.
		HTML string `json:"html,omitempty"`

		// Textual representation of the content.
		Text string `json:"text,omitempty"`
	} `json:"description,omitempty"`

	// The identifier of the vulnerability.
	ID string `json:"id,omitempty"`

	// Hypermedia links to corresponding or related resources.
	Links []Link `json:"links,omitempty"`

	// The last date the vulnerability was modified.
	// The format is an ISO 8601 date, `YYYY-MM-DD`.
	Modified string `json:"modified,omitempty"`

	// The date the vulnerability was first published or announced.
	// The format is an ISO 8601 date, `YYYY-MM-DD`.
	Published string `json:"published,omitempty"`

	// The severity score of the vulnerability, on a scale of 0-10.
	SeverityScore int `json:"severityScore,omitempty"`

	// The title (summary) of the vulnerability.
	Title string `json:"title,omitempty"`
}
