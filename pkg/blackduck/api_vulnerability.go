package blackduck

import (
	"encoding/json"
	"fmt"
	"net/http"
	"strings"
)

func (cli *BlackDuckClient) GetVulnerabilityBOM(projectID string, versionID string) (resp *VulnerabilityBOMResponse, err error) {
	resp = &VulnerabilityBOMResponse{}
	endpoint := strings.Replace(GetVulnerabilityBOM, "{PROJECT_ID}", projectID, 1)
	endpoint = strings.Replace(endpoint, "{VERSION_ID}", versionID, 1)

	var body []byte
	// TODO paging?
	body, err = cli.executeRequest(http.MethodGet, fmt.Sprintf("%s?offset=0&limit=100&sort=project.name", endpoint), nil)
	if err == nil {
		err = json.Unmarshal(body, resp)
		if err != nil {
			err = fmt.Errorf("error while parsing vulnerability bom response - %s", err.Error())
		}
	} else {
		err = fmt.Errorf("error while getting vulnerability bom for [%s|%s]", projectID, versionID)
	}

	return resp, err
}

func (cli *BlackDuckClient) GetComponentInformation(projectID string, projectVersionID string) (resp *ComponentResponse, err error) {
	resp = &ComponentResponse{}
	endpoint := strings.Replace(GetComponents, "{PROJECT_ID}", projectID, 1)
	endpoint = strings.Replace(endpoint, "{VERSION_ID}", projectVersionID, 1)

	var body []byte
	body, err = cli.executeRequest(http.MethodGet, endpoint, nil)
	if err == nil {
		err = json.Unmarshal(body, resp)
		if err != nil {
			err = fmt.Errorf("error while parsing component response - %s", err.Error())
		}
	} else {
		err = fmt.Errorf("error while getting components for [%s|%s] - %s", projectID, projectVersionID, err.Error())
	}

	return resp, err
}

func (cli *BlackDuckClient) GetPolicyStatus(projectID, projectVersionID, componentID, componentVersionID string) (resp *PolicyRulesResp, err error) {
	resp = &PolicyRulesResp{}
	endpoint := strings.Replace(GetPolicyStatus, "{PROJECT_ID}", projectID, 1)
	endpoint = strings.Replace(endpoint, "{VERSION_ID}", projectVersionID, 1)
	endpoint = strings.Replace(endpoint, "{COMPONENT_ID}", componentID, 1)
	endpoint = strings.Replace(endpoint, "{COMPONENT_VERSION}", componentVersionID, 1)

	var body []byte
	body, err = cli.executeRequest(http.MethodGet, endpoint, nil)
	if err == nil {
		err = json.Unmarshal(body, resp)
		if err != nil {
			err = fmt.Errorf("error while parsing component policy response - %s", err.Error())
		}
	} else {
		err = fmt.Errorf("error while getting component policies for [%s|%s|%s|%s]", projectID, projectVersionID, componentID, componentVersionID)
	}

	return resp, err
}

func (cli *BlackDuckClient) GetComponentVulnerabilities(projectID, projectVersionID, componentID, componentVersionID string) (resp *ComponentVulnerabilityResponse, err error) {
	resp = &ComponentVulnerabilityResponse{}
	endpoint := strings.Replace(GetComponentVulnerability, "{PROJECT_ID}", projectID, 1)
	endpoint = strings.Replace(endpoint, "{VERSION_ID}", projectVersionID, 1)
	endpoint = strings.Replace(endpoint, "{COMPONENT_ID}", componentID, 1)
	endpoint = strings.Replace(endpoint, "{COMPONENT_VERSION}", componentVersionID, 1)

	var body []byte
	body, err = cli.executeRequest(http.MethodGet, endpoint, nil)
	if err == nil {
		err = json.Unmarshal(body, resp)
		if err != nil {
			err = fmt.Errorf("error while parsing component vulnerability response - %s", err.Error())
		}
	} else {
		err = fmt.Errorf("error while getting component vulnerabilities for [%s|%s|%s|%s]", projectID, projectVersionID, componentID, componentVersionID)
	}

	return resp, err
}
